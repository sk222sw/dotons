#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('dotons:server');
var http = require('http');
var https = require("https");
var fs = require("fs");
var path = require("path");

var port;


/**
 * Get port from environment and store in Express.
 */
if (process.env.NODE_ENV === "production") {
  // port = 443;
  // var server = https.createServer({
  //   key: fs.readFileSync("./tls/privkey.pem"),
  //   cert: fs.readFileSync("./tls/fullchain.pem"),
  //   ca: fs.readFileSync("./tls/chain.pem"),
  //   app
  // });

  // server.listen(port);
  // app.set("port", port);
  // //pp.listen(80);
  // server.on('error', onError);
  // server.on('listening', onListening);

  // console.log(process.env.NODE_ENV);
  
  var options = {
    key: fs.readFileSync("./tls/privkey.pem"),
    cert: fs.readFileSync("./tls/fullchain.pem"),
    ca: fs.readFileSync("./tls/chain.pem"),
  };
  
  
  https.createServer(options, app).listen(443);
  
  http.createServer(app);
  http.get("*", (req, res) => {
    res.redirect("https://dotons.xyz" + req.url);
  });
  
  http.listen(80);
  

} else {
  port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

}


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
